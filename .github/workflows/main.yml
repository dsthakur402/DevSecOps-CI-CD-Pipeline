name: To-Do Pipeline.
on:
  push

jobs:
  # Snyk:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@master

  #     - name: Run Snyk on backend
  #       uses: snyk/actions/node@master
  #       continue-on-error: true
  #       with:
  #         args: --file=./backend/package.json  # Specify the path to the backend package.json
  #         command: monitor
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  #     - name: Run Snyk on frontend
  #       uses: snyk/actions/node@master
  #       continue-on-error: true
  #       with:
  #         args: --file=./frontend/package.json  # Specify the path to the frontend package.json
  #         command: monitor
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # SonarQube:
  #   runs-on: ubuntu-latest
  #   needs: ["Snyk"]
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - uses: sonarsource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #     # If you wish to fail your job when the Quality Gate is red, uncomment the
  #     # following lines. This would typically be used to fail a deployment.
  #     # - uses: sonarsource/sonarqube-quality-gate-action@master
  #     #   timeout-minutes: 5
  #     #   env:
  #     #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  # Build_with_NPM:
  #   runs-on: ubuntu-latest
  #  # needs: ["SonarQube"]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Cache backend node modules
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           backend/node_modules
  #         key: ${{ runner.os }}-npm-${{ hashFiles('backend/**/*.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-npm-

  #     - name: Install Node.js and npm (Backend)
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         run: npm install
          
  #     - name: Cache frontend node modules
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           frontend/node_modules
  #         key: ${{ runner.os }}-npm-${{ hashFiles('frontend/**/*.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-npm-

  #     - name: Install Node.js and npm (Frontend)
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         run: npm install

  # Unit_Testing:
  #   runs-on: ubuntu-latest
  #   # needs: ["Build_with_NPM"]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
        
  #     - name: Install Node.js and npm (Backend)
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         run: npm install

  #     - name: Install Jest Package (Backend)
  #       working-directory: backend
  #       run: npm i -g jest
  #     - name: Run Backend Unit Tests
  #       working-directory: backend
  #       run: npm test

# To Use GitHub-Hosted you must Set-excecution Policy in PowerShell Run as Adminstrator.
# Get-ExecutionPolicy
# Set-ExecutionPolicy RemoteSigned
# Get-ExecutionPolicy


  # Functional_Testing:
  #   runs-on: self-hosted
  #   # needs: ["Unit_Testing"]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Set up JDK
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '11'  # Adjust as needed
  #         distribution: 'adopt'

  #     - name: Run Functional Tests
  #       run: |
  #         cd Fucntional-Testing/demo
  #         mvn test

  Trivy_Scan_Docker_Image:
    runs-on: ubuntu-latest
    # needs: ["Functional_Testing"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image Frontend
      run: docker build -t power_pipeline_frontend:latest ./frontend

    - name: Build Docker image Backend
      run: docker build -t power_pipeline_backend:latest ./backend
      
    - name: Shows Docker Images
      run: docker images

    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        trivy --version
        
    - name: Scan frontend image
      run: |
        trivy image power_pipeline_frontend:latest
    - name: Scan backend image
      run: |
        trivy image power_pipeline_backend:latest
